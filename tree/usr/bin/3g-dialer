#!/bin/bash
source /usr/lib/elive-tools/functions
el_make_environment

guitool=zenity
lists="/usr/share/3g-dialer/templates"
logs="/tmp/.3g-dialer-${USER}-logs"
progress_file="/tmp/.3g-dialer-${USER}-progress"
connected="/tmp/.3g-dialer-${USER}-connected"
debug="yes"
timeout="timeout 30"
wvdialrc="$HOME/.wvdialrc"

TOOL_VERSION="2" # do not use floatpoint

export TEXTDOMAIN="3g-dialer"
export LC_NUMERIC="C"


# TODO:
# * hability to disable cdrom mode ? we dont need that crap, ask to user if want it, how to re-enable, etc...
# * sending sms?
# http://simoncpu.wikia.com/wiki/Experiments_on_GSM/GPRS/HSDPA_modem


#===  FUNCTION  ================================================================
#          NAME:  providers_list_show_sorted
#   DESCRIPTION:  show the list of providers in the sorted form
#    PARAMETERS:  dir where the list of files of providers are located
#===============================================================================
providers_list_show_sorted(){
    # pre {{{
    local list
    list="$1"

    el_debug
    el_check_variables "list"

    # - pre }}}

   providers_list_show "$1" | sort | awk 'BEGIN{FS = "::"} {print $3"\n"$1"\n"$2}'
}

#===  FUNCTION  ================================================================
#          NAME:  kill_pid
#   DESCRIPTION:  kills forcely a pid
#    PARAMETERS:  pid
#===============================================================================
kill_pid(){
    # pre {{{
    local pid pid_wvdial
    pid="$1"

    el_debug "${pid}"

    # - pre }}}
    # only kill if exists
    if [[ -n "$pid" ]] ; then
        kill "$pid" 2>/dev/null 1>&2 || kill -9 "$pid" 2>/dev/null 1>&2
    fi

    # force kill of possible wvdial commands by us
    pid_wvdial="$( ps aux | grep -v grep | grep "wvdial connect" | awk '{print $2}' )"
    if [[ -n "${pid_wvdial}" ]] ; then
        kill "${pid_wvdial}" || kill -9 "${pid_wvdial}"
    fi


}
#===  FUNCTION  ================================================================
#          NAME:  providers_list_show_sorted
#   DESCRIPTION:  show the list of providers in the sorted form
#    PARAMETERS:  dir where the list of files of providers are located
#===============================================================================
providers_list_show(){
    # pre {{{
    local file provider country list
    list="$1"

    el_debug
    el_check_variables "list"
    el_check_dirs "$list"
    el_check_dir_has_files "$list"

    # - pre }}}
    for file in "${list}"/*__*
    do
        unset provider country
        file="${file##*/}" # basename

        provider="${file%__*}" # show first field
        country="${file##*__}" # show second field

        if [[ -n "$file" ]] && [[ -n "${provider}" ]] && [[ -n "${country}" ]] ; then
            echo "$country::$provider::$file"
        fi
    done
}

#===  FUNCTION  ================================================================
#          NAME:  device_modem_select
#   DESCRIPTION:  search for a modem device in /dev
#    PARAMETERS:  - | force
#===============================================================================
device_modem_select(){
    # pre {{{
    if ((is_device_found)) ; then
        return
    fi
    el_debug

    if [[ -z "${device}" ]] && [[ "$1" != "new" ]] ; then
        config_get
    fi
    # - pre }}}
    # FIXME add bluetooth devices feature too

    # test actual modem {{{
    if [[ -n "${device}" ]] && [[ "${1}" != "new" ]] ; then
        # this checks if the modem works, if not, we should select a new one
       if wvdial device_reset 2>&1 | grep -qi "Modem initialized" ; then
           el_explain 1 0 "modem working"
           return
       fi
    fi

    # - test actual modem }}}
    # detect or select modem {{{
    { echo 10 ; sleep 1000 ; } \
        | $guitool --progress --text=$"Detecting your modem..." --pulsate &
    pid=$!
    device="$( wvdialconf 2>&1 | grep -i "Found a modem on" | sed -e 's|^.*/dev/|/dev/|g' -e 's|\.$||g' | grep -E "(ACM|USB)" )"

    if [[ -c "${device}" ]] ; then
        kill_pid "${pid}"

        # multiple ones found ?
        if [[ "$( echo "${device}" | wc -l)" -gt "1" ]] ; then
            device="$( echo "$device" | $guitool --list --text=$"Select the device from the list" --column=$"Device" || echo /dev/ttyUSB1 )"
            el_explain 1 0 "Device selected is __${device}__"
            is_device_found=1
        else
            el_explain 1 0 "Modem found at __${device}__"
            is_device_found=1
        fi
    else
        if [[ "${FUNCNAME[1]}" = "$FUNCNAME" ]] ; then
            kill_pid "${pid}"

            el_error "modem not found."
            el_explain 0 0 "XXInfo:XX If it is connected and you see it like a __cdrom__ device, try to eject it before"

            $guitool --error --text=$"Modem or phone not found, are you sure that is connected? Try to unplug and plug it back, search information in google and if finally not works you can report the bug to Elive"
            exit_me 0
        else
            sleep 10
            kill_pid "${pid}"

            $FUNCNAME
        fi
    fi

    # }}}
}

#===  FUNCTION  ================================================================
#          NAME:  config_get
#   DESCRIPTION:  read some values required from the conf
#===============================================================================
config_get(){
    # pre {{{
    el_debug
    el_check_variables "wvdialrc"

    # - pre }}}
    if [[ -f "${wvdialrc}" ]] \
        && grep -qi "3G_DIALER_SUCCESS:.*yes" "${wvdialrc}" ; then
    # get some variables from our last conf {{{

        # device
        if [[ -z "${device}" ]] ; then
            device="$( grep "^Modem =" "${wvdialrc}" | head -1 )"
            device="${device/*\/dev//dev}"
            el_explain 1 0 "device used last is __${device}__"
        fi

        # pin required?
        if grep -q "Init.*AT+CPIN.*=" "${wvdialrc}" ; then
            device_pin="$( grep "Init.*= AT+CPIN =" "${wvdialrc}" | sed -e 's|^.*AT+CPIN.*=||g' | head -1 )"
            # remove extra leading blank chars
            read -r device_pin <<< "$device_pin"

            el_explain 1 0 "pin is __${device_pin}__"
            if [[ ! "${#device_pin}" = "4" ]] || [[ "$device_pin" = *[^0-9]* ]] ; then
                device_pin_request
            fi
            is_pin_needed=1
        else
            is_pin_needed=0
        fi
    # - get some variables from our last conf }}}
    fi

}

#===  FUNCTION  ================================================================
#          NAME:  device_pin_check
#   DESCRIPTION:  verify if the pin was accepted or not
#    PARAMETERS:
#===============================================================================
device_pin_check(){
    # pre {{{
    if ((is_pin_set)) ; then
        return
    fi
    local line

    el_debug

    # - pre }}}
    while read -ru 3 line
    do
        # device not found
        if [[ "${line}" = *"Cannot open /dev"* ]] ; then
               # pick a new modem {{{
               if [[ "${FUNCNAME[1]}" = "$FUNCNAME" ]] ; then
                   # select a new device for use
                   el_explain 2 0 "already run, selecting a new device"
                   unset device
                   device_modem_select
               else
                   # try again (once), maybe device is not initialized
                   el_explain 2 0 "trying again"
                   sleep 10
                   $FUNCNAME
               fi

               # - run again }}}
        fi

       # pin is accepted
       if [[ "${line}" = *"CPIN: READY"* ]] ; then
           el_explain 0 0 "pin is accepted"
           is_pin_set=1
           break
       fi

       # pin required to insert
       if [[ "${line}" = *"CPIN: SIM PIN"* ]] ; then
           el_explain 0 0 "pin required to insert"
           return 1
       fi

       # puk required
       if [[ "${line}" = *"CPIN: SIM PUK"* ]] ; then
           el_explain 0 0 "woops, puk required? really?"
           $guitool --error --text=$"Seems like your modem requires the PUK key, this happens when you have failed the PIN for 3 times which locks your SIM card, we recommend you to try again by just unplug the device and try to connect again, if you still having PUK errors, try to extract the SIM card from the modem and put it on any cell phone, where you can easly unlock the PIN by giving the PUK code"
           # TODO: implement a way to unlock the puk (added in template)
       fi

    done 3<<< "$( wvdial check_pin_status 2>&1 )"
}

#===  FUNCTION  ================================================================
#          NAME:  device_pin_set
#   DESCRIPTION:  set the pin to the device
#===============================================================================
device_pin_set(){
    # pre {{{
    if ((is_pin_set)) ; then
        return
    fi
    local line

    el_debug
    if ! ((device_pin)) ; then
        config_get
    fi

    # - pre }}}
    # we need pin but we don't have conf
    if ! grep -q "Init1 = AT+CPIN = " "$HOME/.wvdialrc" ; then
        if ! ((device_pin)) ; then
            device_pin_request
        fi

        echo -e "\n[Dialer pin]" >> $HOME/.wvdialrc
        echo -e "Init1 = AT+CPIN = $device_pin" >> $HOME/.wvdialrc
    fi

    # set the pin
    if ((is_pin_needed)) && ! ((is_pin_set)) ; then
       kill_pid "$pid_pin"

       if [[ -z "${device_pin}" ]] ; then
           device_pin_request
       fi


       while read -ru 3 line
       do
           # device not found
           if [[ "${line}" = *"Cannot open /dev"* ]] ; then
               # run again {{{
               if [[ "${FUNCNAME[1]}" = "$FUNCNAME" ]] ; then
                   # select a new device for use
                   el_explain 2 0 "already run, selecting a new device"
                   unset device
                   device_modem_select
               else
                   sleep 10
                   $FUNCNAME
               fi

               # - run again }}}
               return
           fi

           # device works and pin seems to be set, verify it
           if [[ "${line}" = *"Modem initialized"* ]] ; then
               el_explain 1 0 "device works and pin seems to be set, verifying..."

               if device_pin_check ; then
                   break
               fi
           fi

           if echo "$line" | grep -qiE "(Device or resource busy|No such file or directory)" ; then
               kill_pid "$pid_pin_gui"
               device_busy "$@"
           fi

           if echo "$line " | grep -qE "(not specify a valid modem device)" "$logs" ; then
               el_explain 0 0 "wrong modem ? select a new one"
               device_modem_select
           fi


       done 3<<< "$( wvdial pin 2>&1 )"

   fi

   kill_pid "$pid_pin_gui"
   kill_pid "$pid_pin"

   unset pid_pin pid_pin_gui

   if ! ((is_pin_set)) && ((is_pin_needed)) ; then
       $guitool --error --text=$"The pin inserted is not valid, are you sure that is correct or that you need a pin?"
       device_pin_request
   fi
}

#===  FUNCTION  ================================================================
#          NAME:  device_pin_request
#   DESCRIPTION:  request pin to the user
#===============================================================================
device_pin_request(){
    # pre {{{
    local example
    el_debug

    # }}}
    if wvdial check_pin_status 2>&1 | grep -q "+CPIN: SIM PIN" ; then
        is_pin_needed=1

        config_get pin
        : ${device_pin:="1234-example"}
        pin="$( $guitool --entry --entry-text="$device_pin" --text=$"Please enter your PIN code" || echo cancel )"

        if [[ "${pin}" = "cancel" ]] ; then
           return
        fi

        if [[ ! "${#pin}" = "4" ]] || [[ "$pin" = *[^0-9]* ]] ; then
            unset pin is_pin_needed
            $guitool --error --text=$"PIN must be a value of 4 digits only, no letters or other characters, please try again"

            $FUNCNAME
        else
            el_explain 0 0 "pin selected is __${pin}__"
            device_pin="${pin}"
            # set it
            if [[ "${FUNCNAME[1]}" = "configuration_select_new" ]] ; then
                device_pin_set
            fi
        fi
    fi
}
#===  FUNCTION  ================================================================
#          NAME:  configuration_select_new
#   DESCRIPTION:  set a new configuration profile
#===============================================================================
configuration_select_new(){
    # pre {{{
    local full_list selected Username Password Apn Phone Baud Modem Isdn
    el_debug


    # }}}

    # search and select for a device
    device_modem_select new

    cat > $HOME/.wvdialrc << EOF
[Dialer Defaults]
Modem = $device
Username = ''
Password = ''

[Dialer check_pin_status]
Init1 = AT+CPIN?
EOF

    # check if we need to set a pin
    device_pin_request

    # show list of possible providers
    full_list="$(providers_list_show_sorted "$lists" )"
    selected="$( { echo -e "disconnect\n"$"Disconnect""\n"$"Disconnect your connection""\n""null\n"$"Any""\n"$"It is not listed here" ; echo "$full_list" ; sleep 1 ; echo "" ; } | $guitool --list --column="File" --column=$"Country" --column=$"Provider" --hide-column=1 --text=$"Select your desired Provider and Country to connect" --height="420" --width="440" || echo cancel )"

    if [[ "$selected" = "cancel" ]]; then
        exit_me 0
    fi

    unset Username Password Apn Phone Baud Modem Isdn

    if [[ "$selected" = "disconnect" ]] ; then
        exit_me 1
    fi

    if [[ "$selected" = "null" ]] ; then
        Username=request
        Password=request
        # FIXME: change these names to something better
    else
        source "${lists}/$selected"
    fi

    provider="${selected%%_*}"



    if [[ -z $Apn ]] ; then
        $guitool --info --text=$"The APN (Access Point Name) is the most important element that you need to know in order to connect to the Internet. If you do not know it, you can ask your Provider or search on google. It should be something like: internet, Internet, web.vodafone.de, movistar.es\n\nIt can be also an EMPTY value"
        Apn=$( $guitool --entry --text=$"Enter the APN (Access Point Name) of your Provider" || echo cancel )
    fi

    if [[ "$Apn" = "cancel" ]] ; then
        unset Apn
    fi

    #Note: If the APN is empty you should use 'empty' name:
    if [[ "$Apn" = "" ]] ; then
        # FIXME change that value to an unique ID
        Apn="empty"
    fi

    Apn="$Apn internet"

    if echo $Username | grep -q phonenumber ; then
        if [[ -z "$phonenumber" ]] ; then
            phonenumber="$( $guitool --entry --text=$"Enter the phone number to connect" || echo cancel )"
        fi
        Username="${Username/phonenumber/$phonenumber}"
    fi

    if echo "$Password" | grep -q phonenumber ; then
        if [[ -z "$phonenumber" ]] ; then
            phonenumber="$( $guitool --entry --text=$"Please enter the phone number to connect" || echo cancel )"
        fi
        Password="${Password/phonenumber/$phonenumber}"
    fi

    if [[ "$Username" = "request" ]] ; then
        Username="$( $guitool --entry --text=$"Enter the Username to use" || echo dummy )"
    fi
    if [[ "$Password" = "request" ]] ; then
        Password="$( $guitool --entry --text=$"Enter the Password to use" || echo dummy )"
    fi

    if [[ -z $Baud ]] ; then
        # FIXME: autodetect with wvdialconf
        Baud=460800
    fi

    if [[ -z $Phone ]] ; then
        Phone="*99# *99***1# #777 #888"
    fi


    rm -f "$logs" 2>/dev/null


for phone in $Phone
do
   for apn in $Apn
   do
      for usernames in yes no
      do
         for dns in no yes
         do
            for stupid in No Yes
            do
#indent
#FIXME: add values from wvdialconf:
cat > $HOME/.wvdialrc << EOF
[Dialer Defaults]
# 3G_DIALER_VERSION: ${TOOL_VERSION}
# 3G_NAME: $provider
# 3G_DIALER_SUCCESS: no
Modem = $device
Username = '$Username'
Password = '$Password'

[Dialer pin_change]
# this also unlocks the puk key
Init1 = AT+CPIN="PUKCODE","PINCODE"

[Dialer check_pin_required]
Init1 = AT+CLCK="SC",2

[Dialer check_pin_status]
Init1 = AT+CPIN?

[Dialer show_info]
Init1 = ATI

[Dialer show_manufacturer]
Init1 = AT+CGMI

[Dialer show_model]
Init1 = AT+CGMM

[Dialer show_imei]
Init1 = AT+CGSN

[Dialer device_reset]
Init1 = ATZ

[Dialer show_signal_quality]
# typically from 5 to 22
Init1 = AT+CSQ

[Dialer connect]
Phone = $phone
Baud = $Baud
Stupid Mode = $stupid
Init = ATZ
Init2 = ATQ0 V1 E1 S0=0 &C1 &D2 +FCLASS=0
Init3 = AT+CGDCONT=1,"IP","$apn"
EOF

    if [[ "$dns" = "yes" ]] ; then
       echo -e "Auto_DNS = no" >> $HOME/.wvdialrc
       [[ ! -z "$Dns1" ]] && echo -e "dns1 = $Dns1" >> $HOME/.wvdialrc
       [[ ! -z "$Dns2" ]] && echo -e "dns2 = $Dns2" >> $HOME/.wvdialrc
    fi

    if [[ "$usernames" = "no" ]] ; then
        sed -i "s/^Username.*$/Username = ''/" $HOME/.wvdialrc
        sed -i "s/^Password.*$/Password = ''/" $HOME/.wvdialrc
    fi

    if [[ "$apn" = "empty" ]] ; then
        sed -i "s/^Init3.*$/Init3 = AT+CGDCONT=1,\"IP\",\"\"/" $HOME/.wvdialrc
    fi

    # more entry's
    if ((is_pin_needed)) ; then
        echo -e "\n[Dialer pin]" >> $HOME/.wvdialrc
        echo -e "Init1 = AT+CPIN = $device_pin" >> $HOME/.wvdialrc
    fi



    rm -f "$logs" "$progress_file" 2>/dev/null

    touch "$progress_file" "$logs"
    el_explain 0 0 "Trying to connect"

    # need pin?
    if ! ((is_pin_set)) && ((is_pin_needed)) ; then
        device_pin_set
    fi

    if grep -q EXIT_NOW "$connected" 2>/dev/null ; then
        exit_me 0
    fi


    ( while test -f "$progress_file" ; do cat "$progress_file" ; sleep 0.3 ; done ) | ( $guitool --progress --auto-close --text=$"Elive is trying to connect,\nusing configuration: ""\n\n"$"Phone:"" '${phone}'\n"$"APN:"" '${apn}'\n"$"With Username:"" ${usernames}\n"$"With auto-dns:"" ${dns}\n"$"Using 'stupid mode' provider:"" ${stupid}\n\n"$"Please be patient while waiting\nfor the attempts to be completed" || echo EXIT_NOW >> "$connected" ) &

    is_connection_trying=1

    device_connect

    if grep -q EXIT_NOW "$connected" 2>/dev/null ; then
        exit_me 1
    fi

            done
         done
      done
   done
done

if ! ((is_connected)) ; then
    $guitool --error --text=$"It is not possible to connect. You can check your log file in:""\n${logs} "$"which has information that can be useful, by other side we suggest you to set your own configuration if the one provided is not correct, you can easly found it in google searching something this string 'wvdial OR linux configuration OR apn ${provider}', then just go to the option 'not listed here' for add your settings, if you think that you can help making better this tool please refer to the Elive website"
fi



}

###########################################################################
exit_me(){
    echo "PIDS: $pid_pin | $pid_wvdial ******" 1>&2

    kill_pid "$pid_pin"

    if [[ "$1" = "1" ]] ; then
        kill_pid "$pid_wvdial"
        ps aux | grep -v grep | grep wvdial 1>&2
    fi

    echo EXIT_NOW >> "$connected"
    rm -f "$connected" "$progress_file"

    exit 0
}

####################################################################
device_busy(){
   if [[ "$1" != "connect" ]] ; then
      $guitool --error --text=$"Looks like your device is busy or you have selected a wrong device, please disconnect and connect it again, then run this application once more"
      # FIXME: there instead declare to disconnect the modem and connect it back, then scan for the device to use
      exit_me 1
   fi
}

####################################################################
device_connect(){
    #FIXME's:
    # - check if device exists and is reachable
    # - show progress bar from main code

    local line message_carrier_no counter time_connect_limit selected

    time_connect_limit=15
    counter=0

    kill_pid "$pid_wvdial"

    #   { { wvdial 2>&1 & } ; pid_wvdial=$! ; } | tee $logs 1>/dev/null # Si se añade esta tuberia no entra en background asi que no usarlo

    # sleep 1 second for flush possible transfer, otherwise we can get a "device busy"

    if [[ "${FUNCNAME[1]}" != "configuration_select_new" ]] ; then
        provider="$( cat "${wvdialrc}" | grep "3G_NAME" | sed 's|^.*3G_NAME: ||g' )"

        { sleep 1 ; echo 10 ; sleep 1000 ; } \
            | $guitool --progress --auto-kill --text=$"Connecting to: ""${provider}..." --pulsate &

        pid_connecting_gui=$!
    fi

    sleep 1

    device_modem_select
    device_pin_check

    wvdial connect 2>"${logs}" &
    pid_wvdial=$!

    echo 2 > "$progress_file"

    while true
    do
        # timeout for try to connect
        if test "${counter}" -ge "${time_connect_limit}" ; then
            break
        fi

        # check for request to exit
        if grep -q EXIT_NOW "$connected" 2>/dev/null ; then
            exit_me 0
        fi

        # error in device
        if grep -q "Modem not responding" "${logs}" ; then
            el_explain 2 1 "modem not responding"
            $guitool --error --text=$"Modem is not responding, please try to unplug it and plug it in again"
            exit_me 1
        fi

        if grep -q "^CONNECT" "${logs}" ; then
            el_explain 2 1 "connected"
            echo "connected" >> "$connected"
            connected_wait_for_prompt
            is_connected=1
            break
        fi

        # device busy
        if grep -q "Device or resource busy" "${logs}" ; then
            el_explain 2 1 "device busy"
            device_busy
            kill_pid "${pid_wvdial}"
            kill_pid "${pid_connecting_gui}"  # FIXME that var from where it comes ? it is correctly set ?
        fi

        # no carrier
        if grep -q "NO CARRIER" "${logs}" ; then
            el_explain 2 1 "no carrier"
            message_carrier_no=1
        fi

        # update progress
        sleep 1
        counter="$(( $counter + 1 ))"

        # 15 = 100 %
        echo "$( echo "( ${counter} / ${time_connect_limit} ) * 100" | bc -l | sed 's|\..*$||g' )" > "${progress_file}"
        el_explain 2 1 "progress is __$(cat ${progress_file})__"

    done

    # stop parent dialog
    rm -f "$progress_file"
    sleep 0.5 # delay required for parent

    kill_pid "$pid_connecting_gui"

    if ! ((is_connected)) && [[ "${FUNCNAME[1]}" = "main" ]] ; then
       selected="$( echo -e "retry\n"$"Try again""\nconfig_new\n"$"New configuration" | $guitool --list --column="" --column=$"Option" --hide-column=1 --text=$"Was not possible to connect, select an option:" --height="240" --width="340" || echo cancel )"
       case "$selected" in
           cancel)
               if ((message_carrier_no)) ; then
                    $guitool --error --text=$"No carrier found, was not possible to connect to your provider, possible reasons:"$"\n- Try to unplug and plug again your device"$"\n- Try in a different location with better signal"$"\n- Connection not allowed, try it in a different computer or contact your provider to see if your connection is correctly working"
                fi
               exit_me 0
               ;;
           retry)
               $FUNCNAME
               ;;
           config_new)
               configuration_select_new
               ;;
       esac

   fi


}
####################################################################
connected_wait_for_prompt(){
   : > $logs

   if [[ "$EL_DEBUG" -gt "1" ]] ; then
       cat "$logs" 1>&2
   fi

   { sleep 1 ; echo 10 ; sleep 1000 ; } | $guitool --progress --text=$"Connected, waiting for the provider details" --pulsate &
   pid_prompt_gui=$!

   while true
   do
       sleep 1
       if grep -qiE "(Device or resource busy|No such file or directory)" "$logs" ; then
           kill_pid "$pid_prompt_gui"
           device_busy "$@"
           exit_me 1
       fi
       if grep -qE "(local.*IP.*address|remote.*IP.*address|primary.*DNS|secondary.*DNS)" $logs ; then
           # ok, connected
           kill_pid "$pid_prompt_gui"
           kill_pid "$pid_connecting_gui"
           connected_successfully
           break
       fi
   done
}
####################################################################
connected_successfully(){
    el_explain 0 0 "connected successfully"
    $timeout $guitool --info --text=$"You have been successfully connected to the Internet."

    el_check_files "${wvdialrc}"
    sed -i 's|^.*3G_DIALER_SUCCESS:.*$|# 3G_DIALER_SUCCESS: yes|g' "${wvdialrc}"

    exit_me 0
}

###########################################################################
#                                  Main                                   #
###########################################################################

main(){
    # pre {{{
    rm -f "$connected" "$progress_file" "$logs"
    touch "$connected" "$progress_file" "$logs"

    el_group_add "dialout"
    # }}}

    case $1 in
        status)
            true
            #TODO: add "status" and quality of connection etc...

            ;;
        disconnect)
            # FIXME: real disconnect commands ?
            killall wvdial 2>/dev/null && exit 0
            sleep 8
            killall -9 wvdial 2>/dev/null
            ;;
        connect|*)
            # old version or not successfully connected, run new conf
            if ! grep -qi "3G_DIALER_SUCCESS:.*yes" "${wvdialrc}" || test "$( grep "3G_DIALER_VERSION:" "${wvdialrc}" | sed 's|^.*VERSION: ||g' )" -lt "${TOOL_VERSION}" ; then
                configuration_select_new
            else
                device_connect
            fi


            ;;
    esac



    #FIXME: Add a question about if connect, disconnect, or select a new provider, this question should be NOT launched if the variable emodule is set (in order to not needed it from the future module)

}

main "$@"








# vim: set foldmethod=marker :
