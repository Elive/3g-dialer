#!/bin/bash
lists="/usr/share/3g-dialer/templates"
guitool=zenity
logs="/tmp/.3g-dialer-${USER}-logs"
progress_file="/tmp/.3g-dialer-${USER}-progress"
connected="/tmp/.3g-dialer-${USER}-connected"
export TEXTDOMAIN="3g-dialer"
debug="yes"

rm -f $connected $progress_file $logs
#FIXME: Add a question about if connect, disconnect, or select a new provider, this question should be NOT launched if the variable emodule is set (in order to not needed it from the future module)

[[ -x /usr/bin/timeout ]] && timeout="timeout 30" || unset timeout

####################################################################
show_list_providers_sorted(){
   show_list_providers | sort | awk 'BEGIN{FS = "::"} {print $3"\n"$1"\n"$2}'
}
show_list_providers(){
   for file in ${lists}/*
   do
      unset name country
      file=$(basename "$file")
      name=$(echo $file | awk -v FS="__" '{print $1}')
      country=$(echo $file | awk -v FS="__" '{print $2}')
      [[ -z "$file" ]] && continue
      [[ -z "$name" ]] && continue
      [[ -z "$country" ]] && continue

      echo "$country::$name::$file"
   done
}
####################################################################
exit_me(){
   echo "PIDS: $pid_pin | $pid ******" 
   [[ ! -z "$pid_pin" ]] && { kill $pid_pin 2>/dev/null 1>&2 || kill -9 $pid_pin 2>/dev/null 1>&2 ; }
   if [[ "$1" = "1" ]] ; then
      [[ ! -z "$pid" ]] && { kill $pid 2>/dev/null 1>&2 || kill -9 $pid 2>/dev/null 1>&2 ; }
      killall wvdial 2>/dev/null
   fi
   echo EXIT_NOW >> $connected
   rm -f $connected $progress_file
   exit 0
}
####################################################################
device_busy(){
   if [[ "$1" != "connect" ]] ; then
      $guitool --error --text=$"Looks like your device is busy or you have selected a wrong device, please disconnect and connect it again, then run this application once more"
   fi
}
####################################################################
set_pin_code(){
   [[ "$need_pin" != "yes" ]] && return
   [[ ! -z "$pid_pin" ]] && { kill $pid_pin 2>/dev/null 1>&2 || kill -9 $pid_pin 2>/dev/null 1>&2 ; }
   if [[ "$1" != "connect" ]]; then
      # show gui only if we are not connecting explicitly
      $guitool --info --text=$"Entering PIN code '$pin' in your modem, please wait" & 
      pid_pin_gui=$!
   fi

   # FIXME: is needed "wvdial pin" when pin is required
   wvdial pin 2>$logs &
   pid_pin=$!

   while true
   do
      sleep 2
      if grep -qiE "(Device or resource busy|No such file or directory)" $logs ; then
         kill $pid_pin_gui
         device_busy "$@"
         exit_me 1
      fi
      if grep -qE "(ERROR|Bad init string|operation not allowed|^OK)" $logs ; then
         break
      fi
   done

   kill $pid_pin_gui
   kill $pid_pin
   unset pid_pin pid_pin_gui
   pin_ok="yes"
   return
}
####################################################################
try_to_connect(){
   #timeout 10 kill $pid 
#   timeout 10 killall wvdial 2>/dev/null 1>&2
   [[ ! -z "$pid" ]] && { kill $pid 2>/dev/null 1>&2 || kill -9 $pid 2>/dev/null 1>&2 ; }
   
#   { { wvdial 2>&1 & } ; pid=$! ; } | tee $logs 1>/dev/null # Si se aÃ±ade esta tuberia no entra en background asi que no usarlo
   echo 10 > $progress_file
   kill $pid 2>/dev/null
   wvdial connect 2>$logs &
   pid=$!
   #
   sleep 14
   
   grep -q EXIT_NOW $connected 2>/dev/null && exit_me 1

   if grep -q CONNECT $logs ; then
      sleep 5
      echo "connected" >> $connected
   fi
   if grep -q "NO CARRIER" $logs ; then
      $guitool --error --text="NO CARRIER: "$"This message means that there is a problem connecting to your provider. Please try to unplug and plug again your device and then wait 5 minutes before to try to connect, sometimes is needed that your device will start before to use, if this not works, try to move to a different place with a better signal."
   fi
   if grep -q "Modem not responding" $logs ; then
      $guitool --error --text=$"Modem is not responding, please try to unplug it and plug it in again"
      exit_me 1
   fi
   if grep -qiE "(Device or resource busy|No such file or directory)" $logs ; then
      device_busy
      [[ -n "$pid_connecting_gui" ]] && { kill $pid_connecting_gui 2>/dev/null || kill -9 $pid_connecting_gui 2>/dev/null ; } 
   fi
   #echo 100 > $progress_file
   rm -f $progress_file
}
####################################################################
connected_wait_for_prompt(){
   : > $logs
   [[ "$debug" = "yes" ]] && cat $logs
   if [[ "$1" != "connect" ]]; then
      # only show gui if we are not connecte explicitly
      { sleep 1 ; echo 10 ; sleep 1000 ; } | $guitool --progress --text="Connected... Waiting for data" --pulsate &
      pid_prompt_gui=$!
   fi

   while true
   do
      sleep 1
      if grep -qiE "(Device or resource busy|No such file or directory)" $logs ; then
         [[ -n "$pid_prompt_gui" ]] && { kill $pid_prompt_gui 2>/dev/null || kill -9 $pid_prompt_gui 2>/dev/null ; } 
         device_busy "$@"
         exit_me 1
      fi
      if grep -qE "(local.*IP.*address|remote.*IP.*address|primary.*DNS|secondary.*DNS)" $logs ; then
         # ok, connected
         [[ -n "$pid_prompt_gui" ]] && { kill $pid_prompt_gui 2>/dev/null || kill -9 $pid_prompt_gui 2>/dev/null ; } 
         [[ -n "$pid_connecting_gui" ]] && { kill $pid_connecting_gui 2>/dev/null || kill -9 $pid_connecting_gui 2>/dev/null ; } 
         connected_successfully
         break
      fi
   done
}
####################################################################
connected_successfully(){
   $timeout $guitool --info --text=$"You have been successfully connected to the Internet."
   exit_me 0
}
####################################################################
main(){
if $guitool --question --text=$"Do you need to enter a PIN code for your modem? This is normally needed when you use a 3G-HSDPA modem connected via USB. It is not needed if you connect your phone to the computer" ; then
   pin="$( $guitool --entry --entry-text="1234-example" --text=$"Please enter your PIN code" || echo cancel )"
   need_pin="yes"
   if [[ ! "${#pin}" = "4" ]] || [[ "$pin" = *[^0-9]* ]] ; then
      unset pin need_pin
   fi 
fi
full_list="$(show_list_providers_sorted)"
selected="$( { echo -e "disconnect\n"$"Disconnect""\n"$"Disconnect your connection""\n""null\n"$"Any""\n"$"It is not listed here" ; echo "$full_list" ; sleep 1 ; echo "" ; } | $guitool --list --column="File" --column=$"Country" --column=$"Provider" --hide-column=1 --text=$"Select your desired Provider\nand Country to connect" --height="360" --width="300" || echo cancel )"

if [[ "$selected" = "cancel" ]]; then exit_me 0 ; fi

unset Username Password Apn Phone  Baud Modem Isdn
if [[ "$selected" = "disconnect" ]] ; then
   exit_me 1
fi
if [[ "$selected" = "null" ]] ; then
   Username=request
   Password=request
else
   source ${lists}/"$selected"
fi

name="${selected%%_*}"
# Note, more than one 'try' needs to be separed by a simple space

####################################################################
if [[ -z $Apn ]] ; then
   $guitool --info --text=$"The APN (Access Point Name) is the most important element that you need to know in order to connect to internet, if you don't know it you can ask it at your Provider or search in google, it should be something like: internet, Internet, web.vodafone.de, movistar.es\n\nIt can be also a EMPTY value"
   Apn=$( $guitool --entry --text=$"Enter the APN (Access Point Name) of your Provider" || echo cancel )
fi
[[ "$Apn" = "cancel" ]] && unset Apn
#Note: If the APN is empty you should use 'emptry' name:
[[ "$Apn" = "" ]] && Apn="empty"
Apn="$Apn internet"

if echo $Username | grep -q phonenumber ; then
   [[ -z "$phonenumber" ]] && phonenumber=$( $guitool --entry --text=$"Please enter your phone number" || echo cancel )
   Username=${Username/phonenumber/$phonenumber}
fi
if echo $Password | grep -q phonenumber ; then
   [[ -z "$phonenumber" ]] && phonenumber=$( $guitool --entry --text=$"Please enter your phone number" || echo cancel )
   Password=${Password/phonenumber/$phonenumber}
fi
[[ "$Username" = "request" ]] && Username=$( $guitool --entry --text=$"Enter the Username to use" || echo dummy )
[[ "$Password" = "request" ]] && Password=$( $guitool --entry --text=$"Enter the Password to use" || echo dummy )

[[ -z $Baud ]] && Baud=460800
[[ -z $Phone ]] && Phone="*99# *99***1# #777 #888" # FIXME: probar con mi yoigo a ver que pasa si no pongo ningun "phone" variable y dejo solo esto (empezando por el 777) a ver si magicamente se autoconecta a internet =)
####################################################################

# FIXME: Add the selector of bluetooth/usb modes (add a helper for bluetooth, and verify it too), that sets the variable $device

if [[ "$( ls -1 /dev/ttyACM* /dev/ttyUSB* 2>/dev/null | wc -l )" -gt "1" ]] ; then
   device="$( ls -1 /dev/ttyACM* /dev/ttyUSB* 2>/dev/null | $guitool --list --text=$"Select the device from the list" --column=$"Device" || echo /dev/ttyACM0 )"
else
   device="$( ls -1 /dev/ttyACM* /dev/ttyUSB* 2>/dev/null | head -1 )"
fi

rm -f $logs 2>/dev/null


for phone in $Phone
do
   for apn in $Apn
   do
      for usernames in yes no
      do
         for dns in no yes
         do
            for stupid in No Yes
            do
#indent
cat > $HOME/.wvdialrc << EOF
[Dialer Defaults]
# 3G_NAME: $name
Modem = $device
Username = '$Username'
Password = '$Password'

[Dialer connect]
Phone = $phone
Baud = $Baud
Stupid Mode = $stupid
Init = ATZ
Init2 = ATQ0 V1 E1 S0=0 &C1 &D2 +FCLASS=0
Init3 = AT+CGDCONT=1,"IP","$apn"
EOF
[[ "$dns" = "yes" ]] && {
   echo -e "Auto_DNS = no" >> $HOME/.wvdialrc
   [[ ! -z "$Dns1" ]] && echo -e "dns1 = $Dns1" >> $HOME/.wvdialrc
   [[ ! -z "$Dns2" ]] && echo -e "dns2 = $Dns2" >> $HOME/.wvdialrc
}
[[ "$usernames" = "no" ]] && {
   sed -i "s/^Username.*$/Username = ''/" $HOME/.wvdialrc
   sed -i "s/^Password.*$/Password = ''/" $HOME/.wvdialrc
}
[[ "$apn" = "empty" ]] && {
   sed -i "s/^Init3.*$/Init3 = AT+CGDCONT=1,\"IP\",\"\"/" $HOME/.wvdialrc
}
[[ "$need_pin" = "yes" ]] && {
   echo -e "\n[Dialer pin]" >> $HOME/.wvdialrc
   echo -e "Init1 = AT+CPIN=$pin" >> $HOME/.wvdialrc
}


rm -f $logs $progress_file 2>/dev/null
sleep 1
touch $progress_file $logs
#echo -e "\tD: Try to connect"

[[ "$pin_ok" != "yes" ]] && set_pin_code
grep -q EXIT_NOW $connected 2>/dev/null && exit_me 0

( while test -f $progress_file ; do cat $progress_file ; sleep 1 ; done ) | ( $guitool --progress --pulsate --auto-close --text=$"Elive is trying to connect using:\n\nPhone '${phone}'\nAPN '${apn}'\nWith Username: '${usernames}'\nWith auto-dns: '${dns}'\nUsing 'stupid mode': ${stupid}\n\nPlease be patient while waiting\nthat the attemps will be completed" || echo EXIT_NOW >> $connected ) &

try_to_connect

#( while test -f $progress_file ; do cat $progress_file ; sleep 1 ; done ) | ( $guitool --progress --pulsate --auto-close --auto-kill --text=$"Elive is trying to connect using:\n\nPhone '${phone}'\nAPN '${apn}'\nWith Username: '${usernames}'\nWith auto-dns: '${dns}'\nUsing 'stupid mode': ${stupid}\n\nPlease be patient while waiting\nthat the attemps will be completed" || echo cancel )
grep -q EXIT_NOW $connected && exit_me 1

#FIXME: separar el zenity del comando que parece no cerrarse correctamente... parsear los resultados de los logs para saber si seguir intentando o mostrar el mensaje de conectado
grep -q connected $connected && connected_wait_for_prompt "$@" || kill $pid
            done
         done
      done
   done
done

[[ -z $connected ]] && $guitool --error --text=$"It is not possible to connect. You can check your log file, ${logs} which contains a lot of useful information about why it has not been possible to be connected. You can also try the 'not listed here' option in the list, or edit the templates in /usr/share/3g-dialer/templates with the correct information" 
}


case $1 in
disconnect)
   killall wvdial 2>/dev/null && exit 0
   sleep 8
   killall -9 wvdial 2>/dev/null
   ;;
connect)
   [[ ! -f $HOME/.wvdialrc ]] && { main ; exit ; }
   # This one ("1234") is just to remove deprecated configurations, remote it in the future
   if grep -q "1234" $HOME/.wvdialrc ; then
      echo -e "Removing deprecated PIN configuration..."
      sed -i "/[Dialer pin]/d" $HOME/.wvdialrc
      sed -i "/Init1 = AT+CPIN=/d" $HOME/.wvdialrc
   fi
   if grep -q "1234-example" $HOME/.wvdialrc ; then
      sed -i "/[Dialer pin]/d" $HOME/.wvdialrc
      sed -i "/Init1 = AT+CPIN=/d" $HOME/.wvdialrc
   fi
   name="$( cat $HOME/.wvdialrc | grep "3G_NAME" | sed 's|^.*3G_NAME: ||g' )"
   { sleep 1 ; echo 10 ; sleep 1000 ; } | $guitool --progress --text="Connecting to ${name}..." --pulsate &
   pid_connecting_gui=$!

   if grep -q "Dialer pin" $HOME/.wvdialrc ; then
      need_pin="yes"
      set_pin_code "$@"
   fi
   : > $connected
   try_to_connect
   grep -q EXIT_NOW $connected && exit_me 1
   grep -q connected $connected && connected_wait_for_prompt "$@" || kill $pid
   

   ;;
*)
   main
   ;;
esac
